---
export const prerender = true;
import {getCollection, getEntry, render} from 'astro:content';

import Docs from '~/layouts/docs.astro';
import Toc from '~/components/toc/index.astro';
import Link from '~/components/link.astro'

export async function getStaticPaths() {
    const docsCollection = await getCollection('docs');
    return docsCollection.map((doc) => {
        const [version, lang, ...slug] = doc.id.split('/');
        return {
            params: {
                version: version.split('').join('.'), // we receive "10" string, transforming to "1.0"
                lang: lang,
                slug: slug.join('/'),
            },
            props: doc
        }
    })
}

const {id} = Astro?.props;

if (id === undefined) {
    throw new Error('ID is required');
}

// 2. Query for the entry directly using the request slug
const page = await getEntry('docs', id);

// 3. Redirect if the entry does not exist
if (page === undefined) {
    return Astro.redirect("/404");
}

const github_page =
    "https://github.com/nulllogic/scssleon/blob/master/docs/" + page.id;

const {headings, Content} = await render(page);
---

<Docs>
    <div class="toc">
        <Toc headings={headings} github_page={github_page}/>
    </div>
    <div class="content">
        <div class="intro">
            <h1 class="title">{page?.data?.title}</h1>
            <p class="subtitle">{page?.data?.description}</p>
        </div>
        <Content components={{a: Link}}/>
    </div>
</Docs>

<style lang="scss" is:global>
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "~/styles/app.scss" as app;

  // â†“ Amazing content
  @use "~/styles/scss/content" with (
    $config: app.$config,
    $theme: app.$theme
  );

  @use "~/styles/scss/components/accordion" with (
    $config: app.$config,
    $theme: app.$theme
  );

</style>

<style lang="scss">

  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "~/styles/app.scss" as app;

  $intro: (
    margin: 0 0 15px 0,
    _subclasses : (
      '.title' : (
        font-size: clamp(2.0273rem, 1.8053rem + 0.8833vw, 2.5341rem),
        line-height: 1,
        font-weight: 500,
        margin: 0,
        padding: 0 0 15px 0,
      ),
      '.subtitle' : (
        font-size: clamp(1.125rem, 1.0634rem + 0.2451vw, 1.2656rem),
        font-weight: 300,
        color: rgba(125, 133, 144, 1),
        line-height: 1.778rem,
      )
    )
  );

  @include app.generate-component(
      $intro,
      'intro',
      app.$config,
      app.$theme
  );

  /*body {*/
  /*  // Demonstrate the vertical rhythm at 12px*/
  /*  background-image: linear-gradient(rgba(122,122,122,0.5) 1px, transparent 1px);*/
  /*  background-size: 100% 14px;*/
  /*}*/

  .title {

  }

  .subtitle {
    font-size: 1.35rem;
    font-weight: 300;
    color: rgba(125, 133, 144, 1);
    line-height: 1.778rem;
  }

  .toc {
    grid-area: toc;

    position: sticky;
    top: 60px;
    right: 0;
    z-index: 2;

    align-self: start;
  }

  .content {
    grid-area: content;
    min-width: 1px;
  }
</style>

<script>
  const accordion = (elements, options) => {
    const defaults = {
      accordion_item : ':scope > .item',
      question_class : ':scope > .question',
      answer_class : ':scope > .answer',
      toggle_element : ':scope > .question > button',

      show_multiply : false,
      a11y : true
    };

    // Options
    const settings = Object.assign({}, defaults, options);

    // @TODO Add transitions
    // @Add keycodes

    const _a11y_checker = () => {
      // @TODO Add aria-expanded check
      // @TODO Add IDs
    }

    const _add_event_listeners = (question, answer, toggle_element) => {
      toggle_element.addEventListener('click', (e) => {
        e.preventDefault();
        question.classList.toggle('open');
        answer.toggleAttribute('hidden');

        if(toggle_element.getAttribute('aria-expanded') !== 'true') {
          toggle_element.setAttribute('aria-expanded', 'true');
        } else {
          toggle_element.setAttribute('aria-expanded', 'false');
        }

      })
    }

    const _make_ID = () => {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
        /[xy]/g, (c) => {
          let r = (Math.random() * 16) | 0;
          let v = c === 'x' ? r : (r & 0x3) | 0x8;
          return v.toString(16);
        },
      );
    }

    const _init = () => {
      // attach classes to buttons and containers
      [].forEach.call(elements, (accordion) => {
        let accordion_items = accordion.querySelectorAll(settings.accordion_item);
        if(accordion_items.length > 0) {
          [].forEach.call(accordion_items, (item) => {
            _add_event_listeners(
              item.querySelector(settings.question_class),
              item.querySelector(settings.answer_class),
              item.querySelector(settings.toggle_element)
            );
          })
        }
      });
    }

    // Initiating the accordion
    if(accordion) {
      _init();
    }

    return ({
      elements : elements,
      open : () => {}
    })
  }

  const accords = accordion(document.querySelectorAll('.accordion'), {
  });
</script>