---
export const prerender = true;

import {getCollection, getEntry} from 'astro:content';

import Docs from '~/layouts/docs.astro';
import Toc from '../../../../components/toc/index.astro';

export async function getStaticPaths() {
    const docsCollection = await getCollection('docs');
    return docsCollection.map((doc) => {
        const [version, lang, ...slug] = doc.slug.split('/');

        return {
            params: {
                version: version.split('').join('.'), // we receive "10" string, transforming to "1.0"
                lang: lang,
                slug: slug.join('/'),
            },
            props: doc
        }
    })
}

const {slug} = Astro?.props;

if (slug === undefined) {
    throw new Error('Slug is required');
}

// 2. Query for the entry directly using the request slug
const page = await getEntry('docs', slug);

// 3. Redirect if the entry does not exist
if (page === undefined) {
    return Astro.redirect("/404");
}

const github_page =
    "https://github.com/nulllogic/scssleon/blob/master/docs/" + page.id;

const {headings, Content} = await page.render();
---

<Docs>
    <div class="toc">
        <Toc headings={headings} github_page={github_page}/>
    </div>
    <div class="content">
        <div class="intro">
            <h1 class="title">{page?.data?.title}</h1>
            <p class="subtitle">{page?.data?.description}</p>
        </div>
        <Content/>
    </div>
</Docs>

<style lang="scss" is:global>
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "~/styles/app.scss" as app;

  // â†“ Amazing content
  @use "~/styles/scss/content" with (
    $config: app.$config,
    $theme: app.$theme
  );

</style>

<style lang="scss">

  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "~/styles/app.scss" as app;

  $intro: (
    margin: 0 0 15px 0,
    _subclasses : (
      '.title' : (
        font-size: 3.75rem,
        line-height: 1,
        font-weight: 500,
        margin: 0,
        padding: 0 0 15px 0,
      ),
      '.subtitle' : (
        font-size: 1.35rem,
        font-weight: 300,
        color: rgba(125, 133, 144, 1),
        line-height: 1.778rem,
      )
    )
  );

  @include app.generate-component(
      $intro,
      'intro',
      app.$config,
      app.$theme
  );

  /*body {*/
  /*  // Demonstrate the vertical rhythm at 12px*/
  /*  background-image: linear-gradient(rgba(122,122,122,0.5) 1px, transparent 1px);*/
  /*  background-size: 100% 14px;*/
  /*}*/

  .title {

  }

  .subtitle {
    font-size: 1.35rem;
    font-weight: 300;
    color: rgba(125, 133, 144, 1);
    line-height: 1.778rem;
  }

  .toc {
    grid-area: toc;

    position: sticky;
    top: 60px;
    right: 0;
    z-index: 2;

    align-self: start;
  }

  .content {
    grid-area: content;
    min-width: 1px;
  }
</style>
