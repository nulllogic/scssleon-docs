---
import * as sass from 'sass'
import path, { dirname } from 'path'

import { getCollection, getEntry } from 'astro:content'

export async function getStaticPaths () {
  const docsCollection = await getCollection('docs')
  const iframes = []

  for (let i = 0; i < docsCollection.length; i++) {

    // console.log(...docsCollection[i].body.toStri);
    const regexp = new RegExp(
      '(\\bframe_url\\b)={["\']?((?:.(?!["\']?\\s+(?:\\S+)=|\\s*\\/?[>"\']))+.)["\']}?',
      'gi')
    if (docsCollection[i].body) {
      const matches = [...docsCollection[i].body?.toString().matchAll(regexp)]

      if (matches.length !== 0) {
        // Check if we have multiply iframe inside document
        if (matches.length > 1) {
          for (let j = 0; j < matches.length; j++) {
            let temp_el = { ...docsCollection[i] }
            temp_el.frame_url = matches[j]['2']
            iframes.push(temp_el)
          }
        } else {
          docsCollection[i].frame_url = matches[0]['2']
          iframes.push(docsCollection[i])
        }
      }
    }
  }

  return iframes.map((doc) => {

    return {
      params: {
        slug: doc?.frame_url,
      },
      props: doc,
    }
  })
}

const { slug } = Astro?.props

if (slug === undefined) {
  throw new Error('Slug is required')
}

// 2. Query for the entry directly using the request slug
const page = await getEntry('docs', slug)

// 3. Redirect if the entry does not exist
if (page === undefined) {
  return Astro.redirect('/404')
}

const page_content = page.body.toString()
const frame_index = parseInt(Astro.props.frame_url.slice('/').at(-1))

const snippet_regexp = new RegExp(
  '<Snippet[^>]*>([^<]*(?:(?!<\\/?Snippet)<[^<]*)*)<\\/Snippet\\s*>', 'gi')
const snippet_matches = [...page_content.matchAll(snippet_regexp)]

// @TODO add iframe preload later
// @TODO improve regex later
const fragment_regexp = new RegExp(
  '<Fragment[^>]*>([^<]*(?:(?!<\\/?Fragment)<[^<]*)*)<\\/Fragment\\s*>', 'gi')
const fragment_matches = [
  ...snippet_matches[(frame_index - 1).toString()]['0'].matchAll(
    fragment_regexp)]

//@todo find better solution

const html = fragment_matches['0'] && fragment_matches['0'].hasOwnProperty('1')
  ? fragment_matches['0']['1'].replace('```html', '').replace('```', '')
  : ''

const scss = await sass.compileStringAsync(
  fragment_matches['1'] && fragment_matches['1'].hasOwnProperty('1') ?
    fragment_matches['1']['1'].replace('```scss', '').replace('```', '') : '', {
    importers: [
      {
        // An importer that redirects relative URLs starting with "~" to
        // `node_modules`.
        findFileUrl (url) {
          if (url.startsWith('~')) {
            return new URL(
              `file://` + path.resolve(process.cwd()) + url.substring(1))
          }
          if (url.startsWith('@')) {
            return import.meta.env.PROD ?
              new URL(
                `file://` + path.resolve(process.cwd()) + '/node_modules/@' +
                url.substring(1)) :
              new URL(
                `file://` + path.resolve(process.cwd()) + '/src/styles/scss/' +
                url.substring(1).replace('nulllogic/scssleon/scss/', ''))
          }

          return null
        },
      }],
  })

const js = fragment_matches['2'] && fragment_matches['2'].hasOwnProperty('1') ?
  fragment_matches['2']['1'].replace('```js', '').replace('```', '') : ''

const outline = await sass.compileStringAsync(`
  body { outline: 1px solid #2980b9 !important; }
  article { outline: 1px solid #3498db !important; }
  nav { outline: 1px solid #0088c3 !important; }
  aside { outline: 1px solid #33a0ce !important; }
  section { outline: 1px solid #66b8da !important; }
  header { outline: 1px solid #99cfe7 !important; }
  footer { outline: 1px solid #cce7f3 !important; }
  h1 { outline: 1px solid #162544 !important; }
  h2 { outline: 1px solid #314e6e !important; }
  h3 { outline: 1px solid #3e5e85 !important; }
  h4 { outline: 1px solid #449baf !important; }
  h5 { outline: 1px solid #c7d1cb !important; }
  h6 { outline: 1px solid #4371d0 !important; }
  main { outline: 1px solid #2f4f90 !important; }
  address { outline: 1px solid #1a2c51 !important; }
  div { outline: 1px solid #036cdb !important; }
  p { outline: 1px solid #ac050b !important; }
  hr { outline: 1px solid #ff063f !important; }
  pre { outline: 1px solid #850440 !important; }
  blockquote { outline: 1px solid #f1b8e7 !important; }
  ol { outline: 1px solid #ff050c !important; }
  ul { outline: 1px solid #d90416 !important; }
  li { outline: 1px solid #d90416 !important; }
  dl { outline: 1px solid #fd3427 !important; }
  dt { outline: 1px solid #ff0043 !important; }
  dd { outline: 1px solid #e80174 !important; }
  figure { outline: 1px solid #ff00bb !important; }
  figcaption { outline: 1px solid #bf0032 !important; }
  table { outline: 1px solid #00cc99 !important; }
  caption { outline: 1px solid #37ffc4 !important; }
  thead { outline: 1px solid #98daca !important; }
  tbody { outline: 1px solid #64a7a0 !important; }
  tfoot { outline: 1px solid #22746b !important; }
  tr { outline: 1px solid #86c0b2 !important; }
  th { outline: 1px solid #a1e7d6 !important; }
  td { outline: 1px solid #3f5a54 !important; }
  col { outline: 1px solid #6c9a8f !important; }
  colgroup { outline: 1px solid #6c9a9d !important; }
  button { outline: 1px solid #da8301 !important; }
  datalist { outline: 1px solid #c06000 !important; }
  fieldset { outline: 1px solid #d95100 !important; }
  form { outline: 1px solid #d23600 !important; }
  input { outline: 1px solid #fca600 !important; }
  keygen { outline: 1px solid #b31e00 !important; }
  label { outline: 1px solid #ee8900 !important; }
  legend { outline: 1px solid #de6d00 !important; }
  meter { outline: 1px solid #e8630c !important; }
  optgroup { outline: 1px solid #b33600 !important; }
  option { outline: 1px solid #ff8a00 !important; }
  output { outline: 1px solid #ff9619 !important; }
  progress { outline: 1px solid #e57c00 !important; }
  select { outline: 1px solid #e26e0f !important; }
  textarea { outline: 1px solid #cc5400 !important; }
  details { outline: 1px solid #33848f !important; }
  summary { outline: 1px solid #60a1a6 !important; }
  command { outline: 1px solid #438da1 !important; }
  menu { outline: 1px solid #449da6 !important; }
  del { outline: 1px solid #bf0000 !important; }
  ins { outline: 1px solid #400000 !important; }
  img { outline: 1px solid #22746b !important; }
  iframe { outline: 1px solid #64a7a0 !important; }
  embed { outline: 1px solid #98daca !important; }
  object { outline: 1px solid #00cc99 !important; }
  param { outline: 1px solid #37ffc4 !important; }
  video { outline: 1px solid #6ee866 !important; }
  audio { outline: 1px solid #027353 !important; }
  source { outline: 1px solid #012426 !important; }
  canvas { outline: 1px solid #a2f570 !important; }
  track { outline: 1px solid #59a600 !important; }
  map { outline: 1px solid #7be500 !important; }
  area { outline: 1px solid #305900 !important; }
  a { outline: 1px solid #ff62ab !important; }
  em { outline: 1px solid #800b41 !important; }
  strong { outline: 1px solid #ff1583 !important; }
  i { outline: 1px solid #803156 !important; }
  b { outline: 1px solid #cc1169 !important; }
  u { outline: 1px solid #ff0430 !important; }
  s { outline: 1px solid #f805e3 !important; }
  small { outline: 1px solid #d107b2 !important; }
  abbr { outline: 1px solid #4a0263 !important; }
  q { outline: 1px solid #240018 !important; }
  cite { outline: 1px solid #64003c !important; }
  dfn { outline: 1px solid #b4005a !important; }
  sub { outline: 1px solid #dba0c8 !important; }
  sup { outline: 1px solid #cc0256 !important; }
  time { outline: 1px solid #d6606d !important; }
  code { outline: 1px solid #e04251 !important; }
  kbd { outline: 1px solid #5e001f !important; }
  samp { outline: 1px solid #9c0033 !important; }
  var { outline: 1px solid #d90047 !important; }
  mark { outline: 1px solid #ff0053 !important; }
  bdi { outline: 1px solid #bf3668 !important; }
  bdo { outline: 1px solid #6f1400 !important; }
  ruby { outline: 1px solid #ff7b93 !important; }
  rt { outline: 1px solid #ff2f54 !important; }
  rp { outline: 1px solid #803e49 !important; }
  span { outline: 1px solid #cc2643 !important; }
  br { outline: 1px solid #db687d !important; }
  wbr { outline: 1px solid #db175b !important; }
`)
---
<!DOCTYPE html>
<html data-color-scheme="">
<head>
    <style set:html={scss.css}/>
</head>
<body>

<div class="wrapper">
    <div class="iframe" set:html={html}/>
    <div class="background"/>
</div>

<script is:inline type="text/javascript">

  const myCustomData = { foo: '' }
  const event = new CustomEvent('myEvent', { detail: myCustomData })
  const html = document.documentElement

  const debounce = (callback, wait) => {
    let timeoutId = null
    return (...args) => {
      window.clearTimeout(timeoutId)
      timeoutId = window.setTimeout(() => {
        callback.apply(null, args)
      }, wait)
    }
  }

  window.addEventListener('resize', function (e) {
    window.scrollTo(0, 0)
    debounce(window.parent.document.dispatchEvent(event), 100)
  })

</script>
<script is:inline type="text/javascript" set:html={js}/>
</body>
</html>

<script define:vars={{ outline: outline.css }}>
  parent.document.addEventListener('toggle_outline', (e) => {
    const existingStyle = document.getElementById('outline')

    if (!existingStyle) {
      const style = document.createElement('style')
      style.setAttribute('id', 'outline')
      style.innerHTML = outline
      document.head.appendChild(style)
    } else {
      existingStyle.remove()
    }
  })
</script>

<script>
  parent.document.addEventListener('dark_mode_toggle', (e) => {
    const current_theme = document.documentElement.getAttribute('data-theme')
    const new_theme = current_theme === 'dark' ? 'light' : 'dark'
    document.documentElement.setAttribute('data-theme', new_theme)
  })

  // Apply saved theme or system preference on page load
  const saved_theme = localStorage.getItem('theme')

  if (saved_theme) {
    document.documentElement.setAttribute('data-theme', saved_theme)
  } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
    document.documentElement.setAttribute('data-theme', 'dark')
  }
</script>

<script>
  parent.document.addEventListener('theme_change', (e) => {
    document.documentElement.setAttribute('data-theme', e?.detail?.theme)
  })
</script>

<style lang="scss">
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "../../styles/app.scss" as app;

  $wrapper: (
    position: relative,
    /***/
    _subclasses: (
      '.iframe' : (
        padding: 1rem,
        position: relative,
        z-index: 2,
        overflow: scroll,
        /***/
        _subclasses: (
        )
      ),
      '.background' : (
        position: absolute,
        width: 100%,
        height: 100%,
        top: 0,
        left: 0,
        z-index: 1,
        -webkit-user-select: none,
        user-select: none,
        background: var(--background),
        _colors : (
          light : (
            /*color: rgb(229, 236, 226),*/
            background : string.unquote('rgba(55, 241, 14, 0.09) linear-gradient(135deg, rgba(219, 226, 216, 0.45) 10%, rgba(0, 0, 0, 0) 0, #0000 50%, rgba(219, 226, 216, 0.45) 0, rgba(219, 226, 216, 0.45) 60%, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0)) repeat 100% /7.07px 7.07px  '),
          ),
          dark : (
            background : string.unquote('rgba(19, 38, 81, 0.1) linear-gradient(135deg, rgba(19, 83, 14, 0.45) 10%, rgba(0, 0, 0, 0) 0, #0000 50%, rgba(19, 83, 14, 0.45) 0, rgba(19, 83, 14, 0.45) 60%, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0)) repeat 100% /7.07px 7.07px  '),
          )
        )
      )
    )
  );

  @include app.generate-component($wrapper, 'wrapper', app.$config, app.$theme);
</style>

<style is:global lang="scss">
  @use "sass:list";
  @use "sass:meta";

  @use "../../styles/app.scss" as app;

  // ↓ Root
  @use "../../styles/scss/root" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Great reset
  @use "../../styles/scss/reset" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Base
  // Special utility, that will dynamically generate CSS
  // properties for HTML tags, specified in theme
  @use "../../styles/scss/base" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Base
  // Special utility, that will dynamically generate CSS
  // properties for HTML tags, specified in theme
  @use "../../styles/scss/content" with (
    $config: app.$config,
    $theme: app.$theme
  );
</style>