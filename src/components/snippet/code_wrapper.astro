---
import fs from 'node:fs'
import readline from 'node:readline';
import {transformerNotationFocus, transformerMetaHighlight} from '@shikijs/transformers'

import {Code} from 'astro:components'
import {getCollection} from 'astro:content'

const docs = await getCollection('docs');
const currentDoc = docs.filter((doc) => {
    return doc?.filePath.includes(Astro.props?.filePath);
})

async function readLinesInRange(filePath, startLine, endLine) {

    let results = [];
    const fileStream = fs.createReadStream(filePath, {encoding: 'utf8'});
    const rl = readline.createInterface({
        input: fileStream,
        crlfDelay: Infinity // Handle all common line endings
    });

    let currentLineNumber = 0;

    for await (const line of rl) {
        currentLineNumber++;

        if (currentLineNumber >= startLine && currentLineNumber <= endLine) {
            results.push(line);
        }

        // Optimization: If we've passed the endLine, we can close the interface
        if (currentLineNumber > endLine) {
            rl.close();
            break; // Exit the loop
        }
    }

    // Handle potential errors during file reading
    rl.on('error', (err) => {
        console.error('Error reading file:', err);
    });

    return results.join('\n');
}

let code = '';

try {
    code = await readLinesInRange(currentDoc[0].filePath, Astro.props.line_start, Astro.props.line_end);
} catch (err) {
    console.error(`Error reading file: ${err.message}`); // Handle potential errors
}
---
<Code defaultColor={'light'}
      themes={{
          light: 'min-light',
          dark: 'github-dark-default',
      }}
      lang={Astro.props.lang} code={code}
      transformers={[transformerMetaHighlight(), transformerNotationFocus()]}
      meta="{1,3}"
/>