---
import {Preview} from '../preview'
import {generate_iframe_link} from '~/utils/links.js'

let slots = []

Object.keys(Astro.slots).forEach((element) => {
    if (element !== 'default') return slots.push(Astro.slots.render(element))
})

const props = await Promise.all(slots)

// HTML
const html_code_formatted = typeof props[0] !== 'undefined' && props[0] !== null
    ? props[0]
    : ''

// SCSS
const scss_code_formatted =
    typeof props[1] !== 'undefined' && props[1] !== null ? props[1] : ''

// JS
const js_code_formatted =
    typeof props[2] !== 'undefined' && props[2] !== null ? props[2] : ''


const {frame_url, preview, min_height} = Astro.props
---

<div class="snippet">
    <div class="preview-container">
        <div class="topnav">
            <div class="navbar">
                <div class="left">
                    <ul class="nav">
                        <li class="item">
                            <a class="link toggle_outline" href="#">
                                <svg width="14" height="14"
                                     viewBox="0 0 14 14"
                                     fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path d="M2 2.004v2H1v-2.5a.5.5 0 01.5-.5H4v1H2zM1 9.004v-4h1v4H1zM1 10.004v2.5a.5.5 0 00.5.5H4v-1H2v-2H1zM10 13.004h2.5a.5.5 0 00.5-.5v-2.5h-1v2h-2v1zM12 4.004h1v-2.5a.5.5 0 00-.5-.5H10v1h2v2zM9 12.004v1H5v-1h4zM9 1.004v1H5v-1h4zM13 9.004h-1v-4h1v4zM7 8.004a1 1 0 100-2 1 1 0 000 2z"
                                          fill="currentColor"></path>
                                </svg>
                            </a>
                        </li>
                        <li class="item">
                            <a class="link dark_mode_toggle" href="#">
                                <svg class="white" width="18px" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                                     stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round"
                                          d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"></path>
                                </svg>
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"
                                     fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round"
                                     stroke-linejoin="round" class="dark">
                                    <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        {
            Astro.slots.has('html') && (
                        <div class="preview">
                            <Preview url={generate_iframe_link(frame_url)}
                                     min_height={min_height}/>
                            <div class="resizer"><span class="drag"><span
                                    class="el"/></span></div>
                        </div>
            )
        }

        <div class="bottomnav">
            <div class="navbar">
                <div class="left">
                    <ul class="nav">
                        {
                            Astro.slots.has('html') && (
                                        <li class="item active">
                                            <a class="link" href="#">
                                                HTML
                                            </a>
                                        </li>
                            )
                        }
                        {
                            Astro.slots.has('scss') && (
                                        <li class="item">
                                            <a class="link" href="#">
                                                SCSS
                                            </a>
                                        </li>
                            )
                        }
                        {
                            Astro.slots.has('js') && (
                                        <li class="item">
                                            <a class="link" href="#">
                                                JS
                                            </a>
                                        </li>
                            )
                        }
                    </ul>
                </div>
                <div class="right">
                    <ul class="nav">
                        <li class="item">
                            <a class="link clipboard" href="#">
                                <svg xmlns="http://www.w3.org/2000/svg"
                                     width="16"
                                     height="16" viewBox="0 0 24 24"
                                     fill="none"
                                     stroke="currentColor" stroke-width="2"
                                     stroke-linecap="round"
                                     stroke-linejoin="round"
                                     class="lucide lucide-copy ">
                                    <rect width="14" height="14" x="8" y="8"
                                          rx="2"
                                          ry="2"></rect>
                                    <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
                                </svg>
                            </a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="tab-content">
            {
                Astro.slots.has('html') && (
                            <div class="tab active">
                                <div client:load class="code"
                                     set:html={html_code_formatted}/>
                            </div>
                )
            }
            {
                Astro.slots.has('scss') && (
                            <div class="tab">
                                <div client:load class="code"
                                     set:html={scss_code_formatted}/>
                            </div>
                )
            }
            {
                Astro.slots.has('js') && (
                            <div class="tab">
                                <div class="code" set:html={js_code_formatted}/>
                            </div>
                )
            }
        </div>
    </div>
</div>

<style lang="scss" is:global>
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "../../styles/app.scss" as app;

  $schema_color_switcher : (
    _subclasses: (
      '&.clicked' : (
        _subclasses: (
          '.white' : (
            display: var(--icon-display),
            _colors: (
              light : (
                icon-display: none,
              ),
              dark : (
                icon-display: inline-block
              )
            )
          ),
          '.dark' : (
            display: var(--icon-display),
            _colors: (
              light : (
                icon-display: inline-block
              ),
              dark : (
                icon-display: none,
              )
            )
          )
        )
      ),
      '.white' : (
        display: var(--icon-display),
        _colors: (
          light : (
            icon-display: inline-block
          ),
          dark : (
            icon-display: none,
          )
        )
      ),
      '.dark' : (
        display: var(--icon-display),
        _colors: (
          light : (
            icon-display: none,
          ),
          dark : (
            icon-display: inline-block
          )
        )
      )
    )
  );

  $snippet-navbar-nav : (
    --nav-gap: 5px,
    _subclasses: (
      '.item': (
        /***/
        _subclasses: (
          '&.active': (
            /***/
            _subclasses: (
              '.link': (
                text-decoration: none,
                color: white,
                background: rgb(74, 109, 71),
              ),
              '&:hover': (
                background: inherit,
              ),
            ),
          ),
          '.link': (
            text-decoration: none,
            padding: .4rem,
            border-radius: 5px,
            color: var(--link-color),
            _colors: (
              light : (
                link-color: rgba(46, 67, 32, 0.7),
              ),
              dark : (
                link-color: rgba(250, 250, 250, 0.7)
              )
            ),
            _subclasses: (
              '&:hover': (
                background: rgb(224, 227, 222),
                color: #333,
              ),
              '&.dark_mode_toggle' : $schema_color_switcher
            ),
          ),
        ),
      ),
    ),
  );

  $snippet-topnav : (
    border-top: none,
    border-radius : 0.43rem 0.43rem 0 0,
    background : var(--background),
    border-bottom: var(--border),
    padding: 5px 8px,
    /***/
    _colors : (
      light : (
        background: rgb(232, 237, 222), // rgb(250, 248, 244) // rgb(234, 246, 237)
        border : 1px solid rgb(219, 219, 219),
      ),
      dark: (
        background : rgb(22, 27, 34),
        border : 1px solid rgba(61, 68, 77, 0.45),
      )
    ),
    /***/
    _subclasses : (
      '.navbar': (
        --navbar-grid-template-columns : auto auto,
        /***/
        _subclasses : (
          ':nth-child(2)' : (
            justify-self: end,
          ),
          '.nav' : $snippet-navbar-nav,
        )
      )
    )
  );

  $snippet-bottomnav : (
    background : var(--background),
    border-bottom: var(--border),
    border-top: var(--border),
    padding: 5px 8px,
    /***/
    _colors : (
      light : (
        background: rgb(232, 237, 222),
        border : 1px solid rgb(219, 219, 219),
      ),
      dark: (
        background : rgb(22, 27, 34),
        border : 1px solid rgba(61, 68, 77, 0.45),
      )
    ),
    /***/
    _subclasses : (
      '.navbar': (
        --navbar-grid-template-columns : auto auto,
        /***/
        _subclasses : (
            ':nth-child(2)' : (
                justify-self: end,
            ),
            '.nav' : $snippet-navbar-nav,
        )
      )
    )
  );

  $preview-resizer-dragging-element : (
    position: absolute,
    left: 100%,
    top: 0,
    bottom: 0,
    -webkit-user-select: none,
    user-select: none,
    display: flex,
    height: 100%,
    align-items: center,
    _subclasses: (
      '.drag' : (
        padding: 0.5rem,
        touch-action: pan-y,
        cursor: ew-resize,
        display: block,
        user-select: none,
        _subclasses: (
          '&:hover .el' : (
            transform: scale(1.25),
            background: rgba(109, 120, 135, 0.75),
          ),
          '.el' : (
            background: rgba(100, 116, 139, 0.6),
            border-radius: 10px,
            width: 0.375rem,
            height: 2rem,
            display: block,
            transition: string.unquote('0.25s background-color, 0.25s transform'),
          )
        )
      ),
    ),
  );

  $snippet-content : (
    /***/
    _subclasses: (
      '.tab': (
        display: none,
        /***/
        _subclasses: (
          '&.active': (
            display: block,
          ),
          '.code': (
            /*border: 1px solid red,*/
            border-top: none,
            border-radius: 0 0 0.5rem 0.5rem,
            display: block,
            margin-bottom: 0,
            width: 100%,
            position: relative,
            overflow: auto,
            /***/
            _subclasses: (
              '.astro-code' : (
                background: var(--xii-snippet-astro-code-background) !important, // 😭 // 🥲
                line-height: 1.1,
                _colors: (
                  light : (
                    astro-code-background : rgb(248, 249, 250),
                  ),
                  dark : (
                    astro-code-background : rgb(13, 17, 23) // github-dark
                  )
                )
              ),
              'pre': (
                padding: 1rem,
                /***/
                _subclasses: (
                  'code': (
                    word-break: normal,
                    background: none,
                    padding: 0,
                    font-size: 0.875rem,
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $snippet: (
    margin: 0 0 1rem 0,
    border-radius: 0.5rem,
    background: var(--background),
    /***/
    _colors: (
      light : (
        background : rgb(248, 249, 250),
      ),
      dark : (
        background : rgb(13, 17, 23) // github-dark
      )
    ),
    /***/
    _subclasses: (
      '.topnav' : $snippet-topnav,
      '.bottomnav' : $snippet-bottomnav,
      '.preview-container': (
        border: var(--border),
        border-radius: 0.5rem,
        /***/
        _colors : (
          light : (
            border : 1px solid rgb(219, 219, 219),
          ),
          dark: (
            border : 1px solid #3d444d,
          )
        ),
        _subclasses: (
          '.preview': (
            position: relative,
            transition: 0.75s background-color,
            /*border: 1px solid red,*/
            border-bottom: none,
            /*border-radius: 5px 5px 0 0,*/
            _subclasses: (
              '&.is_resizing' : (
                pointer-events: none,
                _subclasses: (
                  '.drag .el' : (
                    transform: scale(1.25),
                    background: rgba(109, 120, 135, 0.75),
                  )
                )
              ),
              '.resizer' : $preview-resizer-dragging-element,
            ),
          ),
          '.tab-content': $snippet-content,
        ),
      ),
    ),
  );

  @include app.generate-component($snippet, 'snippet', app.$config, app.$theme, (add_variable_prefix: false));

</style>

<style lang="scss">

  /*
  .content {
    .astro-code {
      white-space: normal;
    }
  }

  .content .shiki {
    margin: 0;
    padding: 0.825rem;
  }

  .dragging {
    .snippet {
      .preview {
        &::after {
          background: rgba(58, 69, 82, 1);
        }
      }
    }

    & * {
      cursor: ew-resize;
      -webkit-user-select: none;
      user-select: none;
    }
  }

  @media (prefers-color-scheme: light) {
  }

  @media (prefers-color-scheme: dark) {
  }

  .snippet {
    position: relative;
    margin-bottom: 2rem;

    border-radius: 5px;
    border: 1px solid rgb(58, 69, 82);

    .preview {
      position: relative;
      transition: 0.75s background-color;
      padding: 1rem;

      .inline {
        position: relative;
        z-index: 10;
        display: block;
      }

      .background {
        stroke: rgba(40, 51, 56, 0.63);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 1;

        -webkit-user-select: none;
        user-select: none;
      }

      &::after {
        width: 1px;
        height: 100%;
        position: absolute;
        top: 0;
        right: -1px;
        display: inline-block;
        background: transparent;
        transition: 0.75s background-color;
        content: "";
      }

      .resizer {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        -webkit-user-select: none;
        user-select: none;

        .drag {
          padding: 0.5rem;
          touch-action: pan-y;
          cursor: ew-resize;
          display: block;
          position: absolute;
          top: 50%;
          left: 0.75rem;
          transform: translate(-50%, -50%);
          user-select: none;

          .el {
            background: rgba(100, 116, 139, 0.6);
            border-radius: 10px;
            width: 0.375rem;
            height: 2rem;
            display: block;
          }
        }
      }
    }

    .code {
      display: block;
      margin-bottom: 0;
      width: 100%;
      position: relative;
      overflow: auto;

      code {
        word-break: normal;
        background: inherit;
      }
    }
  }
*/
</style>

<script>

    document.querySelectorAll('.snippet').forEach((snippet) => {

        // Tabs
        // Checking first, if element exist
        if (snippet.querySelector('.topnav .navbar')) {
            const nav_items_top_left = snippet.querySelectorAll(
                '.topnav .navbar .left .nav .item .link')

            nav_items_top_left.forEach((link) => {
                link.addEventListener('click', (e) => {
                    e.preventDefault()
                    if (link.classList.contains('toggle_outline')) {
                        const event = new Event('toggle_outline')
                        document.dispatchEvent(event)
                    }

                    if (link.classList.contains('dark_mode_toggle')) {
                        const event = new Event('dark_mode_toggle');
                        document.dispatchEvent(event);
                        link.classList.toggle('clicked');
                    }
                })
            })
        }

        // @TODO rewrite a bit code below to make it look nicer

        if (snippet.querySelector('.bottomnav .navbar')) {
            const nav_items_left = snippet.querySelectorAll(
                '.bottomnav .navbar .left .nav .item')
            const tab_items = snippet.querySelectorAll('.tab-content .tab')

            nav_items_left.forEach((nav, index) => {
                nav.querySelectorAll('.link').forEach(element => element.addEventListener('click', function (e) {
                    e.preventDefault()

                    nav_items_left.forEach(
                        element => element.classList.remove('active'))
                    nav.classList.add('active')

                    tab_items.forEach(element => element.classList.remove('active'))
                    tab_items[index].classList.add('active')
                }))
            })

            const nav_items_right = snippet.querySelectorAll(
                '.navbar .right .nav .item')
            nav_items_right.forEach((nav, index) => {
                nav.querySelectorAll('.link').forEach(element => element.addEventListener('click', function (e) {
                    e.preventDefault()
                    if (element.classList.contains('clipboard')) {
                        navigator.clipboard.writeText('<empty clipboard>').then(function () {
                            /* clipboard successfully set */
                        }, function () {
                            /* clipboard write failed */
                        })
                    }
                }))
            })

        }

        const preview = snippet.querySelector('.preview')

        if (preview) {
            // Proceed, if preview is enabled

            const resizer = snippet.querySelector('.preview .resizer .drag')
            if (resizer) {
                const container_limit = Math.round(preview.clientWidth / 1.5);

                resizer.onmousedown = (event) => {
                    event.preventDefault();

                    const original_margin = parseFloat(
                        isNaN(preview.style.marginRight) ? preview.style.marginRight : 0,
                    )
                    const original_mouse_x = event.pageX

                    const event_drag_start_handler = (event) => {
                        const width = original_margin - (event.pageX - original_mouse_x)
                        if (width < container_limit && width > 0) {
                            preview.style.marginRight = width + 'px'
                        } else if (width < 0) {
                            preview.style.marginRight = 0 + 'px'
                        }
                    }

                    const event_drag_end_handler = (event) => {
                        document.documentElement.classList.remove('dragging')
                        preview.classList.remove('is_resizing');
                        document.removeEventListener('mousemove', event_drag_start_handler)
                        document.removeEventListener('mouseup', event_drag_end_handler)
                    }

                    document.documentElement.classList.add('dragging')
                    preview.classList.add('is_resizing');
                    document.addEventListener('mousemove', event_drag_start_handler)
                    document.addEventListener('mouseup', event_drag_end_handler,
                        {once: true})
                }
            }
        }
    })
</script>

<script is:inline>
    function iframe_onload(iframe) {
        if (iframe.dataset.minHeight) {
            iframe.contentWindow.document.querySelector(
                '.iframe').style.minHeight = iframe.dataset.minHeight + 'px'
        }

        iframe.style.height = iframe.contentWindow.document.body.scrollHeight +
            'px'
        iframe.style.visibility = 'visible'
    }
</script>