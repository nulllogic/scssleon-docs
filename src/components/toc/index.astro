---
const {headings} = Astro.props
import Link from '~/components/link.astro'

const github_page =
    'https://github.com/nulllogic/scssleon-docs/tree/master/src/content' + Astro.url.pathname.replace(/\/$/, '') + '.mdx'
---
<nav class="toc">
    <div class="card" style="margin: 0 0 7px 0;">
        <div style="display: flex; align-items: center; justify-content: start; gap: 5px;margin: 0 0 10px 0;">
            <div>
                <svg width="14" height="14" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2"
                     xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.44434 12.6665H13.5554" stroke-linecap="round" stroke-linejoin="round"></path>
                    <path d="M2.44434 3.3335H13.5554" stroke-linecap="round" stroke-linejoin="round"></path>
                    <path d="M2.44434 8H7.33323" stroke-linecap="round" stroke-linejoin="round"></path>
                </svg>
            </div>
            <div>
                On this page
            </div>
        </div>
        <ul class="nav vertical">
            {headings.map((heading) => {
                return (
                        <li class="item">
                            <a href={'#' + heading?.slug} class="link toc-link">{heading.text}</a>
                        </li>
                )
            })}
        </ul>
    </div>
    <div class="subcard">
        <ul class="nav vertical">
            <li class="item">
                <Link href={github_page ? github_page : '#'} class="link sublink">
                    <svg aria-hidden="true" width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M22 7.24a1 1 0 0 0-.29-.71l-4.24-4.24a1 1 0 0 0-1.1-.22 1 1 0 0 0-.32.22l-2.83 2.83L2.29 16.05a1 1 0 0 0-.29.71V21a1 1 0 0 0 1 1h4.24a1 1 0 0 0 .76-.29l10.87-10.93L21.71 8c.1-.1.17-.2.22-.33a1 1 0 0 0 0-.24v-.14l.07-.05ZM6.83 20H4v-2.83l9.93-9.93 2.83 2.83L6.83 20ZM18.17 8.66l-2.83-2.83 1.42-1.41 2.82 2.82-1.41 1.42Z"></path>
                    </svg>
                    Edit this page
                </Link>
            </li>
            <li class="item">
                <Link href={'https://github.com/nulllogic/scssleon/issues/new?template=feature-request.md'} class="link sublink">
                    Request a feature
                </Link>
            </li>
            <li id="scroll_top" class="item" hidden>
                <a href="#" class="link sublink">
                    Scroll to top
                </a>
            </li>
        </ul>
    </div>
</nav>

<style lang="scss">
  @use 'sass:list';
  @use 'sass:meta';
  @use 'sass:map';

  @use '~/styles/app.scss' as app;

  $toc: (
    --nav-item : var(--color),
    position: sticky,
    top: 60px,
    right: 0,
    z-index: 2,
    align-self: start,
    _subclasses : (
      '.nav' : (
        padding: 0.5rem 0,
        _subclasses : (
          '.item .link' : (
            color: rgb(148, 163, 184),
            _subclasses : (
              '&.current' : (
                /*font-weight: 500,*/
                color: inherit,
              )
            )
          )
        )
      ),
      '.subcard' : (
        _subclasses : (
          '.sublink' : (
            gap: 3px,
            font-size: 0.825rem,
            display: inline-flex,
            align-items: center,
          )
        )
      )
    ),
    _colors: (
      light : (
        color: red,
      ),
      dark : (
        color:red
      )
    )
  );

  @include app.generate-component(
      $toc,
      'toc',
      app.$config,
      app.$theme,
      (variable: (exclude : ('nav')))
  );
</style>

<script>
    function highlight_toc_current_link(e) {
        let toc_links = document.querySelectorAll('.toc .nav .item .link');

        e.map((i) => {

            if (i.isIntersecting === true) {
                toc_links.forEach((link) => link.classList.remove('current'));

                const targetLink = document.querySelector(
                    `a[href="#${i.target.id}"].link`,
                );

                if (targetLink) targetLink.classList.add('current');
            }
        });
    }

    let headings = null, content = document.querySelector('main .content');

    if (content !== null) {
        // Get all H1/H2/H3 tags from the post
        headings = content.querySelectorAll(
            ":scope > h1, :scope > h2, :scope > h3,  :scope > h4",
        );
    }

    // Intersection Observer Options
    let options: IntersectionObserverInit = {
        root: null,
        rootMargin: "0px 0px -50% 0px",
        threshold: [1],
    };

    // Each Intersection Observer runs setCurrent
    let observe_header_tags = new IntersectionObserver(highlight_toc_current_link, options);

    if (content !== null) {
        headings.forEach((heading) => {
            // add scroll margin top to account for fixed navbar
            // heading.classList.add("scroll-mt-24");
            observe_header_tags.observe(heading);
        });
    }

    const toc_links = document.querySelectorAll('.toc .card .nav .item .link');

    toc_links.forEach(link => {
        link.addEventListener('click', e => {
            e.preventDefault();
            window.scrollTo({
                behavior: 'smooth',
                top:
                    document.querySelector(e.target.hash).getBoundingClientRect().top -
                    document.body.getBoundingClientRect().top - 60,
            })
        })
    });

</script>

<script>

    const scroll_top_link = document.getElementById('scroll_top')

    document.addEventListener('scroll', (e) => {
        if(scroll_top_link) {
            scroll_top_link.hidden = document.documentElement.scrollTop <= 300;
        }
    });
    // scroll_top
    /*
        const observer = new IntersectionObserver((sections) => {
            sections.forEach((section) => {
                const heading = section.target.querySelector('h2, h3, h4, h5');
                console.log(section.target, heading);
                if (!heading) return;
                const id = heading.getAttribute('id');

                // Get the link to this section's heading
                const link = document.querySelector(`.toc .nav .item a.link[href="#${id}"]`);
                if (!link) return;

                // Add/remove the .active class based on whether the
                // section is visible
                const addRemove = section.intersectionRatio > 0 ? 'add' : 'remove';
                link.classList[addRemove]('active');
            });
        });

        observer.observe(document.querySelector('main .content'));

        update this with whatever class wraps your blog post content
    */
</script>